{"version":3,"sources":["components/Headbar.js","components/Layout.js","api/DataFromRepository.js","components/Card.js","components/Infobox.js","containers/Dashboard.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Headbar","Navbar","variant","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","Layout","props","children","Container","style","marginTop","getCSVRegionifromRepository","date","a","filename","format","finalURL","axios","get","res","result","data","getData","actualDate","Date","previousDate","addDays","getHours","tmpJSON","csv","csv2json","parseNumbers","find","d","denominazione_regione","Card","title","bgColor","textColor","value","CardDeck","bg","text","Header","as","Body","Text","defaultProps","Infobox","dataAggiornamento","split","Dashboard","state","getDataFromRepository","this","setState","rowStyle","Row","Col","xs","sm","totale_casi","deceduti","dimessi_guariti","totale_attualmente_positivi","nuovi_attualmente_positivi","tamponi","totale_ospedalizzati","terapia_intensiva","isolamento_domiciliare","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0ccab79.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst Headbar = () => (\n  <Navbar variant=\"dark\" expand=\"lg\">\n    <Navbar.Brand>covid19-campania</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"https://github.com/franjsco/covid19-campania\">Informazioni sul progetto</Nav.Link>\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n);\n\nexport default Headbar;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nimport Headbar from './Headbar';\n\nconst Layout = (props) => {\n  const sytle = {\n    marginTop: '10px',\n  };\n\n  const { children } = props;\n  return (\n    <div>\n      <Headbar />\n      <Container style={sytle}>\n        { children }\n      </Container>\n    </div>\n\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","// import axios from 'axios';\nimport axios from 'axios';\nimport csv2json from 'csvjson-csv2json';\n\nimport { format, addDays, getHours } from 'date-fns';\n\n\nconst getCSVRegionifromRepository = async (date) => {\n  const url = 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/';\n  const filename = `dpc-covid19-ita-regioni-${format(date, 'yyyyMMdd')}.csv`;\n  const finalURL = `${url + filename}`;\n  let result;\n\n  try {\n    const res = await axios.get(finalURL);\n    result = res.data;\n  } catch (error) {\n    result = null;\n  }\n\n  return result;\n};\n\n\nconst convertCSVtoJSON = (csv) => {\n  if (!csv) {\n    return null;\n  }\n\n  return csv2json(csv, { parseNumbers: true });\n};\n\nconst getData = async () => {\n  const actualDate = new Date();\n  const previousDate = addDays(actualDate, -1);\n  const hour = getHours(actualDate);\n  let result;\n\n  // preleva il CSV con data attuale solamente se sono passate le 18\n  if (hour >= 18) {\n    result = await getCSVRegionifromRepository(actualDate);\n  }\n\n  // preleva il CSV con data precedente qualora non fosse stato trovato quello attuale\n  if (!result) {\n    result = await getCSVRegionifromRepository(previousDate);\n  }\n\n  // converte il CSV in JSON e filtra i dati per la regione Campania\n  if (result) {\n    const tmpJSON = convertCSVtoJSON(result);\n    result = tmpJSON.find((d) => d.denominazione_regione === 'Campania');\n  }\n\n  return result;\n};\n\nexport default getData;\n","import React from 'react';\nimport { Card as CardBootstrap, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst Card = (props) => {\n  const {\n    title,\n    bgColor,\n    textColor,\n    value,\n  } = props;\n\n  return (\n    <CardDeck>\n      <CardBootstrap\n        bg={bgColor}\n        text={textColor}\n        className=\"text-center\"\n      >\n        <CardBootstrap.Header as=\"h6\">\n          {title}\n        </CardBootstrap.Header>\n        <CardBootstrap.Body>\n          <CardBootstrap.Text as=\"h1\">\n            {value}\n          </CardBootstrap.Text>\n        </CardBootstrap.Body>\n      </CardBootstrap>\n    </CardDeck>\n  );\n};\n\nCard.defaultProps = {\n  bgColor: 'light',\n  textColor: 'white',\n  value: '-',\n};\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  bgColor: PropTypes.string,\n  textColor: PropTypes.string,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Infobox = (props) => {\n  const { dataAggiornamento } = props;\n\n  return (\n    <div>\n      <span className=\"font-weight-bold\">Ultimo aggiornamento: </span>\n      { dataAggiornamento.split(' ')[0] }\n    </div>\n  );\n};\n\nInfobox.defaultProps = {\n  dataAggiornamento: 'n.d.',\n};\n\nInfobox.propTypes = {\n  dataAggiornamento: PropTypes.string,\n};\n\nexport default Infobox;\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport getDataFromRepository from '../api/DataFromRepository';\n\nimport Card from '../components/Card';\nimport Infobox from '../components/Infobox';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const data = await getDataFromRepository();\n    this.setState(data);\n  }\n\n\n  render() {\n    const { state } = this;\n\n    const rowStyle = {\n      marginTop: '20px',\n    };\n\n    return (\n      <Container>\n        <Row className=\"text-center\">\n          <Col>\n            <Infobox dataAggiornamento={state.data} />\n          </Col>\n        </Row>\n\n        <Row style={rowStyle}>\n          <Col xs={12} sm={4}>\n            <Card\n              bgColor=\"warning\"\n              title=\"Totale casi\"\n              value={state.totale_casi}\n            />\n          </Col>\n\n          <Col xs={12} sm={4}>\n            <Card\n              bgColor=\"danger\"\n              title=\"Deceduti\"\n              value={state.deceduti}\n            />\n          </Col>\n\n          <Col xs={12} sm={4}>\n            <Card\n              bgColor=\"success\"\n              title=\"Guariti\"\n              value={state.dimessi_guariti}\n            />\n          </Col>\n        </Row>\n\n        <Row style={rowStyle}>\n          <Col xs={12} sm={4}>\n            <Card\n              bgColor=\"info\"\n              title=\"Attualmente positivi\"\n              value={state.totale_attualmente_positivi}\n            />\n          </Col>\n\n          <Col xs={12} sm={4}>\n            <Card\n              bgColor=\"info\"\n              title=\"Nuovi attualmente positivi\"\n              value={state.nuovi_attualmente_positivi}\n            />\n          </Col>\n\n          <Col xs={12} sm={4}>\n            <Card\n              bgColor=\"info\"\n              title=\"Tamponi\"\n              value={state.tamponi}\n            />\n          </Col>\n        </Row>\n\n        <Row style={rowStyle}>\n          <Col xs={12} sm={4}>\n            <Card\n              textColor=\"dark\"\n              title=\"Totale ospedalizzati\"\n              value={state.totale_ospedalizzati}\n            />\n          </Col>\n\n          <Col xs={12} sm={4}>\n            <Card\n              textColor=\"dark\"\n              title=\"Terapia intensiva\"\n              value={state.terapia_intensiva}\n            />\n          </Col>\n\n          <Col xs={12} sm={4}>\n            <Card\n              textColor=\"dark\"\n              title=\"Isolamento domiciliare\"\n              value={state.isolamento_domiciliare}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\n\nconst Footer = () => (\n  <div>\n    <span>Creato da </span>\n    <span className=\"font-weight-bold\">Francesco Esposito </span>\n    (\n    <a href=\"https://franjsco.github.io/\">@franjsco</a>\n    )\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport Layout from './components/Layout';\nimport Dashboard from './containers/Dashboard';\nimport Footer from './components/Footer';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Layout>\n      <Row>\n        <Col>\n          <Dashboard />\n        </Col>\n      </Row>\n      <Row\n        style={{ marginTop: '10px' }}\n        className=\"text-center\"\n      >\n        <Col>\n          <Footer />\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}